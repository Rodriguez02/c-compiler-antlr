      4  *  5    +  9  /  2  *  4   + 5
     |_______|  |________________| |___|
         ↓             ↓             ↓     
       term0         term1         term2

- obtener terminos
- ciclo por terminos: [term0, term1, term2]
    - buscar factores del termino: [4,5]
    - ¿ factores es mayor a 1 ? : si
        - generar temporales dentro del termino
        - ciclo por factores
            - las operaciones dentro del termino tienen
              simpre la misma forma, nunca va a haber 
              dos temporales en una asignacion
            - ej: 9 / 2 * 4 * 5
                 t0 = 9 / 2 
                 t1 = t0 * 4
                 t2 = t1 * 5
            - por lo tanto solo la primer asignacion NO se
              compone de temporales
            - se comienza a evaluar desde la posicion 1, 
              porque el padre de ese factor tiene acceso directo
              al operador
            - si es la primer vuelta: se concantena el valor del factor anterior
              con el operador y el valor actual
              - t0 = 4 * 5
              - incrementar cantidad de temporales
            - si no es la primer vuelta: se concatena el temporal anterior
              con el operador y el valor actual 
              - incrementar cantidad de temporales
        - auxA = auxB // auxA = ""
        - auxB = "t0"
    ¿ es el primer termino ? : si, entonces no se realiza ninguna accion
    debido a que una vez procesado el siguiente termino se realiza la concatenacion
- fin del primer vuelta

-segunda vuelta
    - buscar factores del termino [9, 2, 4]
    - ¿ facores es mayor a 1 ? : si
        - generar temporales dentro del termino
        - ciclo por los factores
            - ¿ es la primera vuelta ? : si
                - t1 = 9 / 2
                - t2 = t0 + 4
        - auxA = "t0"
        - auxB = "t2"
    - ¿ no es el primer termino ? : si
        - t3 = auxA ("t0") + auxB ("t2")
        - auxB = "t3" actualizar auxB al ultimo temporal, 
                      que es el proximo a utilizar
- fin segunda vuelta

- tercer vuelta
    - buscar factores del termino [5]
    - ¿ factores es mayor a 1 ? : no
        - entonces entra al ELSE
        - auxA = "t3"
        - auxB = 5
    - ¿ no es el primer termino ? : si
        - t4 = auxA ("t3") + auxB (5)
        - auxB = "t4" actualizar auxB al ultimo temporal, 
                      que es el proximo a utilizar
- fin tercer vuelta



-------
TESTS PASS

int main(){    

    int y;
    y = (0 * 8 + (1 + 1 / 2 * 6)) + (9 + 7);
}

int main(){    

    int y;
    y = 4 + (8 + 3 * 7) - 9 ;
}

int main(){    

    int y;
    y = 3 / 2 + (4 + 3) * (3 + 9) - 9 * j;
}

int main(){    

    int y;
    y = 3 / 2 + 3 / (4 + 3) * 3 * x - 9 * j;
}

int main(){    

    int y;
    y = 6 * 5 && p > (4 + (2 > 5) || 3 < 10) * 3  || x * 7 > 0;
}

int main(){    

    int y;
    y = (4 * 11 / (-2 * 5 - (4 + 10 ))) > 10 && n < j * 12;
}

int main(){    
    
    int y;
    if(y > 11 && p < 12 - 4){
        a = a + 1 / 5 * 2;
    }else{
        a = 0;
        p = 15;
    }
}

int main(){    
    int y = 7 + (-5 * ((3*2) + (5 / (9 * 3))) - 14) - 20;

    return (10 > 2 && x < 20);
}

int suma(int a, int b){                     func begin suma 
    int sum;                                t0 = a + b;
    sum = a + b;                            sum = t0;
    return sum;                             return sum;
}                                           func end

int main(){                                 func begin main
    int a;                                  t1 = 4 * 3
                                            param t1
    a = sum((4*3), (5/8));                  t2 = 5 / 8
                                            param t2
                                            t3 = call suma, 2
}                                           func end

y = (x * p) + suma()

t0 = x * p;
t1 = call suma
y = t1
